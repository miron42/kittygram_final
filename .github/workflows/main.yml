name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            libjpeg-dev \
            zlib1g-dev \
            libpng-dev \
            libwebp-dev \
            libtiff-dev \
            libopenjp2-7-dev
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel
          pip install flake8==6.0.0
          pip install -r ./backend/requirements.txt
      - name: Run flake8 and tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          flake8 backend/
          cd backend/
          python manage.py test

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Test frontend
        run: |
          cd frontend/
          npm run test

  build_and_push_backend:
    name: Push backend Docker image
    runs-on: ubuntu-latest
    needs: [tests, frontend_tests]
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest
          build-args: |
            ENVIRONMENT=production

  build_and_push_frontend:
    name: Push frontend Docker image
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

  build_and_push_gateway:
    name: Push gateway Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build_and_push_backend, build_and_push_frontend, build_and_push_gateway]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Проверка секретов
      - name: Verify secrets availability
        run: |
          echo "HOST: ${{ secrets.HOST != '' && 'SET' || 'MISSING' }}"
          echo "USER: ${{ secrets.USER != '' && 'SET' || 'MISSING' }}"
          echo "KEY: ${{ secrets.SSH_KEY != '' && 'SET' || 'MISSING' }}"
          echo "PASSPHRASE: ${{ secrets.SSH_PASSPHRASE != '' && 'SET' || 'MISSING' }}"

      # Подготовка SSH
      - name: Setup SSH environment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      # Основные операции на сервере
      - name: Prepare server environment
        uses: fifsky/ssh-action@
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            echo "### Server preparation started ###"
            mkdir -p ~/kittygram
            npm cache clean --force
            sudo apt clean -y
            sudo journalctl --vacuum-time=1d
            sudo docker system prune -af
            sudo systemctl stop kittygram_gunicorn || true
            sudo systemctl disable kittygram_gunicorn || true
            echo "### Server preparation complete ###"

      # Копирование файлов
      - name: Transfer configuration files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "kittygram/"

      # Настройка Nginx
      - name: Configure Nginx
        uses: fifsky/ssh-action@
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "### Nginx configuration started ###"
            sudo cp ~/kittygram/nginx/kittygram.conf /etc/nginx/sites-available/
            sudo ln -sf /etc/nginx/sites-available/kittygram.conf /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl restart nginx
            echo "### Nginx configuration complete ###"

      # Основной деплой
      - name: Run deployment
        uses: fifsky/ssh-action@
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script_timeout: 15m
          script: |
            echo "### Deployment started ###"
            cd ~/kittygram
            
            echo "Pulling new images..."
            docker compose pull
            
            echo "Stopping existing containers..."
            docker compose down
            
            echo "Starting database..."
            docker compose up -d db
            
            echo "Waiting for database initialization..."
            sleep 10
            
            echo "Running migrations..."
            docker compose run --rm backend python manage.py migrate
            
            echo "Collecting static files..."
            docker compose run --rm backend python manage.py collectstatic --noinput
            
            echo "Starting all services..."
            docker compose up -d
            
            echo "### Deployment complete ###"
            echo "Current containers status:"
            docker compose ps

      # Проверка деплоя
      - name: Verify deployment
        uses: fifsky/ssh-action@
        with:
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "### Verification started ###"
            cd ~/kittygram
            docker compose ps
            curl -I http://localhost:9000 || true
            echo "### Verification complete ###"
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Kittygram успешно обновлён"